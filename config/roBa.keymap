#define ZMK_POINTING_DEFAULT_SCRL_VAL 20

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/mouse.h>     // SCRL_UP/DOWN など &msc 用（使うなら）

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <9>;
    scroll-layers = <8>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <10 11>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        win_kana-eng {
            bindings = <&kp LS(CAPSLOCK)>;
            key-positions = <25 26>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;

            // 反時計回り / 時計回り の順。好みで上下を入れ替え可。

            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>; // 20ms間隔で“コロコロ”送る。速すぎる/遅すぎるなら調整
        };

        mac_conn: mac_conn {
            compatible = "zmk,behavior-macro";
            label = "MAC_CONNECT";
            #binding-cells = <0>;
            wait-ms = <300>;
            bindings = <&bt BT_SEL 2 &to 4>;
        };

        win_conn: win_conn {
            compatible = "zmk,behavior-macro";
            label = "WIN_CONNECT";
            #binding-cells = <0>;
            wait-ms = <300>;
            bindings = <&bt BT_SEL 0 &to 0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        win_default {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                   &kp T                                                   &kp Y        &kp U  &lt 8 I    &kp O    &kp P
&kp A             &kp S         &kp D         &kp F                   &kp G        &kp LS(LG(S))               &kp MINUS      &kp H        &kp J  &kp K      &kp L    &kp SQT
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                   &kp B        &kp COLON                   &kp SEMICOLON  &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 1 LANG1  &lt 2 SPACE  &lt_to_layer_0 3 LANG2      &kp BACKSPACE  &lt 3 ENTER                             &kp DEL
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        WIN_FUNCTION {
            bindings = <
&kp F1   &kp F2   &kp F3  &kp F4  &kp F5                       &win_conn  &bt BT_SEL 1  &mac_conn  &bt BT_SEL 3  &bt BT_SEL 4
&kp F6   &kp F7   &kp F8  &kp F9  &kp F10  &trans      &trans  &trans     &trans        &trans     &trans        &trans
&kp F11  &kp F12  &trans  &trans  &trans   &trans      &trans  &trans     &trans        &trans     &trans        &bt BT_CLR
&trans   &trans   &trans  &trans  &trans   &trans      &trans  &trans                                            &bt BT_CLR_ALL
            >;
        };

        WIN_NUM {
            bindings = <
&kp MINUS                &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS                                                   &kp CARET         &kp AMPERSAND      &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH                &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp EXCLAMATION   &kp AT_SIGN        &kp HASH        &kp DOLLAR            &kp PERCENT
&mt LEFT_SHIFT NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD    &kp EQUAL                    &trans          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH
&trans                   &trans        &trans        &trans        &trans        &trans                       &trans          &trans                                                                     &kp PIPE
            >;
        };

        WIN_ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                           &trans        &kp PG_UP       &kp UP_ARROW  &kp PAGE_DOWN  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &kp ESCAPE  &kp LC(LEFT)  &kp LEFT_ARROW  &kp DOWN      &kp RIGHT      &kp LC(RIGHT)
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans      &trans        &kp HOME        &trans        &kp END        &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans      &trans                                                     &trans
            >;
        };

        mac_default {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                   &kp T                                                   &kp Y        &kp U  &lt 8 I    &kp O    &kp P
&kp A             &kp S         &kp D         &kp F                   &kp G        &kp LG(LS(NUMBER_4))        &kp MINUS      &kp H        &kp J  &kp K      &kp L    &kp SQT
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                   &kp B        &kp COLON                   &kp SEMICOLON  &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 5 LANG1  &lt 6 SPACE  &lt_to_layer_0 6 LANG2      &kp BACKSPACE  &lt 7 ENTER                             &kp DEL
            >;

            sensor-bindings = <&scroll_up_down>;
            label = "mac";
        };

        mac_function {
            bindings = <
&kp F1   &kp F2   &kp F3  &kp F4             &kp F5                                    &win_conn  &bt BT_SEL 1  &mac_conn  &bt BT_SEL 3  &bt BT_SEL 4
&kp F6   &kp F7   &kp F8  &kp F9             &kp F10               &trans      &trans  &trans     &trans        &trans     &trans        &trans
&kp F11  &kp F12  &trans  &kp LC(C_BRI_DEC)  &kp C_BRIGHTNESS_INC  &trans      &trans  &trans     &trans        &trans     &trans        &bt BT_CLR
&trans   &trans   &trans  &trans             &trans                &trans      &trans  &trans                                            &bt BT_CLR_ALL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        mac_num {
            bindings = <
&kp MINUS                &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS                                                   &kp CARET         &kp AMPERSAND      &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH                &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp EXCLAMATION   &kp AT_SIGN        &kp HASH        &kp DOLLAR            &kp PERCENT
&mt LEFT_SHIFT NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD    &kp EQUAL                    &trans          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH
&trans                   &trans        &trans        &trans        &trans        &trans                       &trans          &trans                                                                     &kp PIPE
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        mac_arrow {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                           &trans        &kp PG_UP       &kp UP_ARROW  &kp PAGE_DOWN  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &kp ESCAPE  &kp LC(LEFT)  &kp LEFT_ARROW  &kp DOWN      &kp RIGHT      &kp LC(RIGHT)
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans      &trans        &kp HOME        &trans        &kp END        &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans      &trans                                                     &trans
            >;

            sensor-bindings = <&inc_dec_kp PG_DN PG_UP>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans    &trans    &trans    &trans    &kp LC(UP_ARROW)
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &mkp MB4  &mkp MB1  &mkp MB3  &mkp MB2  &kp LC(DOWN_ARROW)
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &mkp MB5  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                  &trans
            >;
        };
    };
};
